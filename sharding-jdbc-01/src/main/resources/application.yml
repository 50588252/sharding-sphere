server:
  port: 1001
mybatis:
  configuration:
    map-underscore-to-camel-case: true
spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: sharding-jdbc-001
  # Sharding-JDBC的配置
  shardingsphere:
    datasource:
      # 数据源，这里配置两个，分别是ds1，ds2
      names: ds1,ds2
      # ds1的配置信息,product_db1
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/product_db1?useUnicode=true&characterEncoding=utf-8
        username: root
        password: Nov2014
      # ds2的配置信息,product_db2
      ds2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/product_db2?useUnicode=true&characterEncoding=utf-8
        username: root
        password: Nov2014
    # 分片的配置
    sharding:
      # 表的分片策略
      tables:
        product_base:
          # 数据节点配置，采用Groovy表达式，分库分表策略，这样是4个节点，ds1.product_base_1/ds1.product_base_2/ds2.product_base_1/ds2.product_base_2
          actual-data-nodes: ds$->{1..2}.product_base_$->{1..2}
          # 分表策略
          table‐strategy:
            inline:
              # 分片键为店铺ID
              sharding‐column: shop_id
              # 分片策略取模
              algorithm‐expression: product_base_$->{shop_id%2+1}
          # 分库策略
          database‐strategy:
            inline:
              sharding‐column: product_id
              algorithm‐expression: ds$->{product_id%2+1}
          # 主键生成策略
          key-generator:
            # 主键
            column: product_id
            # 生成算法
            type: SNOWFLAKE
        product_description:
          # 数据节点配置，采用Groovy表达式
          actual-data-nodes: ds$->{1..2}.product_description_$->{1..2}
          # 分表策略
          table‐strategy:
            inline:
              # 分片键
              sharding‐column: shop_id
              # 分片算法
              algorithm‐expression: product_description_$->{shop_id%2+1}
          # 分库策略
          database‐strategy:
            inline:
              sharding‐column: product_id
              algorithm‐expression: ds$->{product_id%2+1}
    props:
      sql:
        # 日志显示具体的SQL
        show: true